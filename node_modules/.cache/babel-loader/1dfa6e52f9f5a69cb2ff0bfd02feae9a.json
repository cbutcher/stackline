{"ast":null,"code":"import products from'./products.json';// Default wait time for api to return to simulate a real network call\nexport var API_DELAY_MS=400;/**\n * Searches mocked product data for a product by id. Error cases included for completeness but\n * not exercised by assessment example.\n * @param productId \n * @returns product with id === productId\n */export default function getProductByIdMock(productId){var filtered=products.filter(function(product){return product.id===productId;});if(filtered.length===0){return Promise.reject(new Error('Product not found'));}if(filtered.length>1){return Promise.reject(new Error('Internal error: Product id not unique, multiple products found'));}return new Promise(function(resolve){return setTimeout(function(){return resolve(filtered[0]);},API_DELAY_MS);});}","map":{"version":3,"sources":["/Users/cash/dev/stackline/src/mockApi/getProductByIdMock.ts"],"names":["products","API_DELAY_MS","getProductByIdMock","productId","filtered","filter","product","id","length","Promise","reject","Error","resolve","setTimeout"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,iBAArB,CA6BA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,GAArB,CAEP;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAASC,CAAAA,kBAAT,CAA4BC,SAA5B,CAA0E,CACvF,GAAMC,CAAAA,QAAQ,CAAGJ,QAAQ,CAACK,MAAT,CAAgB,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,EAAR,GAAeJ,SAAnB,EAAvB,CAAjB,CAEA,GAAIC,QAAQ,CAACI,MAAT,GAAoB,CAAxB,CAA2B,CACzB,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,GAAIC,CAAAA,KAAJ,CAAU,mBAAV,CAAf,CAAP,CACD,CACD,GAAIP,QAAQ,CAACI,MAAT,CAAkB,CAAtB,CAAyB,CACvB,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,GAAIC,CAAAA,KAAJ,CAAU,gEAAV,CAAf,CAAP,CACD,CAED,MAAO,IAAIF,CAAAA,OAAJ,CAAY,SAACG,OAAD,QAAaC,CAAAA,UAAU,CAAC,iBAAMD,CAAAA,OAAO,CAACR,QAAQ,CAAC,CAAD,CAAT,CAAb,EAAD,CAA6BH,YAA7B,CAAvB,EAAZ,CAAP,CACD","sourcesContent":["import products from './products.json';\n\nexport interface MockProductReviewModel {\n  readonly customer: string;\n  readonly review: string;\n  readonly score: number;\n}\n\nexport interface MockProductSaleModel {\n  readonly weekEnding: string;\n  readonly retailSales: number;\n  readonly wholesaleSales: number;\n  readonly unitsSold: number;\n  readonly retailerMargin: number;\n}\n\nexport interface MockProductModel {\n  readonly id: string;\n  readonly title: string;\n  readonly image: string;\n  readonly subtitle: string;\n  readonly brand: string;\n  readonly reviews: MockProductReviewModel[];\n  readonly retailer: string;\n  readonly details: string[];\n  readonly tags: string[];\n  readonly sales: MockProductSaleModel[];\n}\n\n// Default wait time for api to return to simulate a real network call\nexport const API_DELAY_MS = 400;\n\n/**\n * Searches mocked product data for a product by id. Error cases included for completeness but\n * not exercised by assessment example.\n * @param productId \n * @returns product with id === productId\n */\nexport default function getProductByIdMock(productId: string): Promise<MockProductModel> {\n  const filtered = products.filter(product => product.id === productId);\n\n  if (filtered.length === 0) {\n    return Promise.reject(new Error('Product not found'));\n  }\n  if (filtered.length > 1) {\n    return Promise.reject(new Error('Internal error: Product id not unique, multiple products found'));\n  }\n\n  return new Promise((resolve) => setTimeout(() => resolve(filtered[0]), API_DELAY_MS));\n}"]},"metadata":{},"sourceType":"module"}