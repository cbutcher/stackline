{"ast":null,"code":"import productsData from './products.json';\nconst products = productsData;\n/**\n * Searches mocked product data for a product by id. Error cases included for completeness but\n * not exercised by assessment example.\n * @param productId \n * @returns product with id === productId\n */\n\nexport default function getProductByIdMock(productId) {\n  const filtered = products.filter(product => product.id === productId);\n\n  if (filtered.length === 0) {\n    return Promise.reject(new Error('Product not found'));\n  }\n\n  if (filtered.length > 1) {\n    return Promise.reject(new Error('Internal error: Product id not unique, multiple products found'));\n  }\n\n  return Promise.resolve(filtered[0]);\n}","map":{"version":3,"sources":["/Users/cash/dev/stackline/src/mockApi/getProductByIdMock.ts"],"names":["productsData","products","getProductByIdMock","productId","filtered","filter","product","id","length","Promise","reject","Error","resolve"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AA6BA,MAAMC,QAA4B,GAAGD,YAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASE,kBAAT,CAA4BC,SAA5B,EAA0E;AACvF,QAAMC,QAAQ,GAAGH,QAAQ,CAACI,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,SAA1C,CAAjB;;AAEA,MAAIC,QAAQ,CAACI,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACD;;AACD,MAAIP,QAAQ,CAACI,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gEAAV,CAAf,CAAP;AACD;;AAED,SAAOF,OAAO,CAACG,OAAR,CAAgBR,QAAQ,CAAC,CAAD,CAAxB,CAAP;AACD","sourcesContent":["import productsData from './products.json';\n\nexport interface MockReviewModel {\n  readonly customer: string;\n  readonly review: string;\n  readonly score: number;\n}\n\nexport interface MockSaleModel {\n  readonly weekEnding: string;\n  readonly retailSales: number;\n  readonly wholesaleSales: number;\n  readonly unitsSold: number;\n  readonly retailerMargin: number;\n}\n\nexport interface MockProductModel {\n  readonly id: string;\n  readonly title: string;\n  readonly image: string;\n  readonly subtitle: string;\n  readonly brand: string;\n  readonly reviews: MockReviewModel[];\n  readonly retailer: string;\n  readonly details: string[];\n  readonly tags: string[];\n  readonly sales: MockSaleModel[];\n}\n\nconst products: MockProductModel[] = productsData as MockProductModel[];\n\n/**\n * Searches mocked product data for a product by id. Error cases included for completeness but\n * not exercised by assessment example.\n * @param productId \n * @returns product with id === productId\n */\nexport default function getProductByIdMock(productId: string): Promise<MockProductModel> {\n  const filtered = products.filter(product => product.id === productId);\n\n  if (filtered.length === 0) {\n    return Promise.reject(new Error('Product not found'));\n  }\n  if (filtered.length > 1) {\n    return Promise.reject(new Error('Internal error: Product id not unique, multiple products found'));\n  }\n\n  return Promise.resolve(filtered[0]);\n}"]},"metadata":{},"sourceType":"module"}